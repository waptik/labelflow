/////////////////////////////////////////////////////////////////////////////
//////////////////////        Prisma stuff        ///////////////////////////
/////////////////////////////////////////////////////////////////////////////

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_EXTERNAL_URL")
}

/////////////////////////////////////////////////////////////////////////////
//////////////////////      LabelFlow Entities    ///////////////////////////
/////////////////////////////////////////////////////////////////////////////

model Image {
  id              String   @id @default(uuid()) @db.Uuid
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  url             String
  name            String
  path            String
  mimetype        String
  width           Float
  height          Float
  datasetId       String   @db.Uuid
  externalUrl     String?
  dataset         Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  labels          Label[]
  thumbnail20Url  String?
  thumbnail50Url  String?
  thumbnail100Url String?
  thumbnail200Url String?
  thumbnail500Url String?
  metadata        Json?

  @@index([datasetId, createdAt])
}

model Label {
  id             String      @id @default(uuid()) @db.Uuid
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  x              Float
  y              Float
  height         Float
  width          Float
  geometry       Json
  imageId        String      @db.Uuid
  labelClassId   String?     @db.Uuid
  type           LabelType
  image          Image       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  labelClass     LabelClass? @relation(fields: [labelClassId], references: [id])
  smartToolInput Json?

  @@index([labelClassId])
  @@index([imageId, createdAt])
}

model LabelClass {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  color     String
  index     Int
  datasetId String   @db.Uuid
  dataset   Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  labels    Label[]

  @@index([datasetId, createdAt])
  @@index([datasetId, name])
}

model Dataset {
  id            String       @id @default(uuid()) @db.Uuid
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String
  slug          String
  images        Image[]
  labelClasses  LabelClass[]
  workspaceSlug String
  workspace     Workspace    @relation(fields: [workspaceSlug], references: [slug], onDelete: Cascade)

  @@unique(fields: [workspaceSlug, slug], name: "slugs")
  @@unique(fields: [workspaceSlug, name], name: "workspaceSlugAndDatasetName")
  @@index([workspaceSlug, createdAt])
  @@index([createdAt])
}

model Workspace {
  // Id exists for regularity reasons.
  // It's more appropriate to query Workspaces using the slug
  id               String        @id @default(uuid()) @db.Uuid
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?
  name             String        @unique
  slug             String        @unique
  image            String?
  plan             WorkspacePlan
  stripeCustomerId String?
  datasets         Dataset[]
  memberships      Membership[]

  @@index([slug, deletedAt, createdAt])
  @@index([createdAt])
  @@index([name])
}

model Membership {
  id                    String    @id @default(uuid()) @db.Uuid
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  declinedAt            DateTime?
  role                  UserRole
  workspaceSlug         String
  workspace             Workspace @relation(fields: [workspaceSlug], references: [slug])
  userId                String?   @db.Uuid
  user                  User?     @relation(fields: [userId], references: [id])
  invitationEmailSentTo String?

  @@unique([workspaceSlug, userId])
  @@unique([workspaceSlug, invitationEmailSentTo])
  @@index([workspaceSlug, createdAt])
}

/////////////////////////////////////////////////////////////////////////////
//////////////////////      Next-Auth Entities    ///////////////////////////
/////////////////////////////////////////////////////////////////////////////

model Account {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(uuid()) @db.Uuid
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]

  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token], name: "identifier_token")
}

/////////////////////////////////////////////////////////////////////////////
//////////////////////             Enums          ///////////////////////////
/////////////////////////////////////////////////////////////////////////////

enum LabelType {
  Classification
  Polygon
  Box
}

enum UserRole {
  Owner
  Admin
  Member
}

enum WorkspacePlan {
  Community
  Starter
  Pro
}
